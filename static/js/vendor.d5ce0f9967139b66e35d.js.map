{"version":3,"sources":["webpack:///./node_modules/query-state/index.js","webpack:///./node_modules/query-state/lib/windowHistory.js","webpack:///./node_modules/ngraph.random/index.js","webpack:///./node_modules/query-state/lib/inMemoryHistory.js","webpack:///./node_modules/ngraph.events/index.js","webpack:///./node_modules/query-state/lib/query.js"],"names":["module","exports","queryState","singletonQS","eventify","__webpack_require__","windowHistory","defaults","options","history","Error","dispose","onChanged","validateHistoryAPI","newAppState","query","eventBus","fire","get","Object","create","api","keyName","undefined","set","value","keyNameType","keys","forEach","key","setIfEmpty","off","onChange","callback","ctx","on","offChange","getHistoryObject","instance","window","inMemoryHistory","listeners","useSearchPart","useSearch","hashPrefix","rewriteHashToSearch","stateFromHash","getStateFromHash","stateChanged","changeCallback","length","addEventListener","onHashChanged","push","removeEventListener","mergedState","searchString","location","search","assign","parse","substr","hashString","hash","appState","stringify","replaceState","replace","i","listener","notifyListeners","baseString","queryString","random","inputSeed","Generator","Date","seed","this","nextDouble","randomIterator","array","customRandom","localRandom","next","j","t","shuffle","prototype","maxValue","Math","floor","uniform","gaussian","r","x","y","sqrt","log","lastQueryObject","newQueryObject","setTimeout","subject","reservedWords","hasOwnProperty","validateSubject","registeredEvents","eventsStorage","eventName","handlers","wantToRemoveAll","deleteAllCallbacksForEvent","callbacks","splice","fireArguments","arguments","Array","call","callbackInfo","apply","encodePart","part","encodeURIComponent","saferEscape","character","split","queryRecord","str","strValue","pair","decodeURIComponent","isNaN","match","parseFloat","object","map","toISOString","join"],"mappings":"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","file":"static/js/vendor.d5ce0f9967139b66e35d.js","sourcesContent":["/**\n * Allows application to access and update current app state via query string\n */\nmodule.exports = queryState;\n\nvar eventify = require('ngraph.events');\nvar windowHistory = require('./lib/windowHistory.js');\n\n/**\n * Just a convenience function that returns singleton instance of a query state\n */\nqueryState.instance = instance;\n\n// this variable holds singleton instance of the query state\nvar singletonQS;\n\n/**\n * Creates new instance of the query state.\n */\nfunction queryState(defaults, options) {\n  options = options || {};\n  var history = options.history || windowHistory(defaults, options);\n  validateHistoryAPI(history);\n\n  history.onChanged(updateQuery)\n\n  var query = history.get() || Object.create(null);\n\n  var api = {\n\n    /**\n     * Gets current state.\n     *\n     * @param {string?} keyName if present then value for this key is returned.\n     * Otherwise the entire app state is returned.\n     */\n    get: getValue,\n\n    /**\n     * Merges current app state with new key/value.\n     *\n     * @param {string} key name\n     * @param {string|number|date} value\n     */\n    set: setValue,\n\n    /**\n     * Similar to `set()`, but only sets value if it was not set before.\n     *\n     * @param {string} key name\n     * @param {string|number|date} value\n     */\n    setIfEmpty: setIfEmpty,\n\n    /**\n     * Releases all resources acquired by query state. After calling this method\n     * no hash monitoring will happen and no more events will be fired.\n     */\n    dispose: dispose,\n\n    onChange: onChange,\n    offChange: offChange,\n\n    getHistoryObject: getHistoryObject,\n  }\n\n  var eventBus = eventify({});\n\n  return api;\n\n  function onChange(callback, ctx) {\n    eventBus.on('change', callback, ctx);\n  }\n\n  function offChange(callback, ctx) {\n    eventBus.off('change', callback, ctx)\n  }\n\n  function getHistoryObject() {\n    return history;\n  }\n\n  function dispose() {\n    // dispose all history listeners\n    history.dispose();\n\n    // And remove our own listeners\n    eventBus.off();\n  }\n\n  function getValue(keyName) {\n    if (keyName === undefined) return query;\n\n    return query[keyName];\n  }\n\n  function setValue(keyName, value) {\n    var keyNameType = typeof keyName;\n\n    if (keyNameType === 'object') {\n      Object.keys(keyName).forEach(function(key) {\n        query[key] = keyName[key];\n      });\n    } else if (keyNameType === 'string') {\n      query[keyName] = value;\n    }\n\n    history.set(query);\n\n    return api;\n  }\n\n  function updateQuery(newAppState) {\n    query = newAppState;\n    eventBus.fire('change', query);\n  }\n\n  function setIfEmpty(keyName, value) {\n    if (typeof keyName === 'object') {\n      Object.keys(keyName).forEach(function(key) {\n        // TODO: Can I remove code duplication? The main reason why I don't\n        // want recursion here is to avoid spamming `history.set()`\n        if (key in query) return; // key name is not empty\n\n        query[key] = keyName[key];\n      });\n    }\n\n    if (keyName in query) return; // key name is not empty\n    query[keyName] = value;\n\n    history.set(query);\n\n    return api;\n  }\n}\n\n/**\n * Returns singleton instance of the query state.\n *\n * @param {Object} defaults - if present, then it is passed to the current instance\n * of the query state. Defaults are applied only if they were not present before.\n */\nfunction instance(defaults) {\n  if (!singletonQS) {\n    singletonQS = queryState(defaults);\n  } else if (defaults) {\n    singletonQS.setIfEmpty(defaults);\n  }\n\n  return singletonQS;\n}\n\nfunction validateHistoryAPI(history) {\n  if (!history) throw new Error('history is required');\n  if (typeof history.dispose !== 'function') throw new Error('dispose is required');\n  if (typeof history.onChanged !== 'function') throw new Error('onChanged is required');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/query-state/index.js\n// module id = 3zJd\n// module chunks = 2","/**\n * Uses `window` to monitor hash and update hash\n */\nmodule.exports = windowHistory;\n\nvar inMemoryHistory = require('./inMemoryHistory.js');\nvar query = require('./query.js');\n\nfunction windowHistory(defaults, options) {\n  // If we don't support window, we are probably running in node. Just return\n  // in memory history\n  if (typeof window === 'undefined') return inMemoryHistory(defaults);\n\n  // Store all `onChanged()` listeners here, so that we can have just one\n  // `hashchange` listener, and notify one listeners within single event.\n  var listeners = [];\n\n  var useSearchPart = options && options.useSearch; // prefer query ? over hash #\n\n  // This prefix is used for all query strings. So our state is stored as\n  // my-app.com/#?key=value\n  var hashPrefix = useSearchPart ? '?' : '#?';\n\n  if (options.rewriteHashToSearch) {\n    rewriteHashToSearch();\n  }\n  init();\n\n  // This is our public API:\n  return {\n    /**\n     * Adds callback that is called when hash change happen. Callback receives\n     * current hash string with `#?` sign\n     * \n     * @param {Function} changeCallback - a function that is called when hash is\n     * changed. Callback gets one argument that represents the new state.\n     */\n    onChanged: onChanged,\n\n    /**\n     * Releases all resources\n     */\n    dispose: dispose,\n\n    /**\n     * Sets a new app state\n     *\n     * @param {object} appState - the new application state, that should be\n     * persisted in the hash string\n     */\n    set: set,\n\n    /**\n     * Gets current app state\n     */\n    get: getStateFromHash,\n\n    /**\n     * Allows to rewrite current hash url into search url\n     */\n    rewriteHashToSearch: rewriteHashToSearch\n  };\n\n  // Public API is over. You can ignore this part.\n\n  function init() {\n    var stateFromHash = getStateFromHash();\n    var stateChanged = false;\n\n    if (typeof defaults === 'object' && defaults) {\n      Object.keys(defaults).forEach(function(key) {\n        if (key in stateFromHash) return;\n\n        stateFromHash[key] = defaults[key]\n        stateChanged = true;\n      });\n    }\n\n    if (stateChanged) set(stateFromHash);\n  }\n\n  function rewriteHashToSearch() {\n    var mergedState = Object.create(null);\n\n    var searchString = window.location.search;\n    if (searchString) mergedState = Object.assign(mergedState, query.parse(searchString.substr(1)));\n\n    var hashString = window.location.hash;\n    if (hashString) mergedState = Object.assign(mergedState, query.parse(hashString.substr(2)));\n\n    set(mergedState);\n  }\n\n  function set(appState) {\n    var hash = hashPrefix + query.stringify(appState);\n\n    if (window.history) {\n      window.history.replaceState(undefined, undefined, hash);\n    } else {\n      window.location.replace(hash);\n    }\n  }\n\n  function onChanged(changeCallback) {\n    if (typeof changeCallback !== 'function') throw new Error('changeCallback needs to be a function');\n\n    // we start listen just once, only if we didn't listen before:\n    if (listeners.length === 0) {\n      window.addEventListener('hashchange', onHashChanged, false);\n    }\n\n    listeners.push(changeCallback);\n  }\n\n  function dispose() {\n    if (listeners.length === 0) return; // no need to do anything.\n\n    // Let garbage collector collect all listeners;\n    listeners = [];\n\n    // And release hash change event:\n    window.removeEventListener('hashchange', onHashChanged, false);\n  }\n\n  function onHashChanged() {\n    var appState = getStateFromHash();\n    notifyListeners(appState);\n  }\n\n  function notifyListeners(appState) {\n    for (var i = 0; i < listeners.length; ++i) {\n      var listener = listeners[i];\n      listener(appState);\n    }\n  }\n\n  function getStateFromHash() {\n    var baseString = useSearchPart ? window.location.search : window.location.hash;\n    // or symbol || is used to get empty string when no base string is present. \n    var queryString = (baseString || hashPrefix).substr(hashPrefix.length);\n    return query.parse(queryString);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/query-state/lib/windowHistory.js\n// module id = Kepw\n// module chunks = 2","module.exports = random;\n\n// TODO: Deprecate?\nmodule.exports.random = random,\nmodule.exports.randomIterator = randomIterator\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+new Date());\n  return new Generator(seed)\n}\n\nfunction Generator(seed) {\n  this.seed = seed;\n}\n\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\nGenerator.prototype.next = next;\n\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\nGenerator.prototype.nextDouble = nextDouble;\n\n/**\n * Returns a random real number uniformly in [0, 1)\n */\nGenerator.prototype.uniform = nextDouble;\n\nGenerator.prototype.gaussian = gaussian;\n\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n\n  return x * Math.sqrt(-2 * Math.log(r)/r);\n}\n\nfunction nextDouble() {\n  var seed = this.seed;\n  // Robert Jenkins' 32 bit integer hash function.\n  seed = ((seed + 0x7ed55d16) + (seed << 12)) & 0xffffffff;\n  seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n  seed = ((seed + 0x165667b1) + (seed << 5)) & 0xffffffff;\n  seed = ((seed + 0xd3a2646c) ^ (seed << 9)) & 0xffffffff;\n  seed = ((seed + 0xfd7046c5) + (seed << 3)) & 0xffffffff;\n  seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\n\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: forEach,\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n\n  function shuffle() {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function forEach(callback) {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n\n      callback(t);\n    }\n\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.random/index.js\n// module id = Tz9f\n// module chunks = 2","/**\n * Provides a `null` object that matches history API\n */\nmodule.exports = inMemoryHistory;\n\nfunction inMemoryHistory(defaults) {\n  var listeners = [];\n  var lastQueryObject = defaults;\n\n  return {\n    dispose: dispose,\n    onChanged: onChanged,\n    set: set,\n    get: get\n  };\n\n  function get() {\n    return lastQueryObject;\n  }\n\n  function set(newQueryObject) {\n    lastQueryObject = newQueryObject;\n    setTimeout(function() {\n      triggerChange(newQueryObject);\n    }, 0);\n  }\n\n  function dispose() {\n    listeners = [];\n  }\n\n  function onChanged(changeCallback) {\n    if (typeof changeCallback !== 'function') {\n      throw new Error('changeCallback should be a function')\n    }\n\n    listeners.push(changeCallback);\n  }\n\n  function triggerChange(appState) {\n    listeners.forEach(function(listener) {\n      listener(appState);\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/query-state/lib/inMemoryHistory.js\n// module id = UrnR\n// module chunks = 2","module.exports = function(subject) {\n  validateSubject(subject);\n\n  var eventsStorage = createEventsStorage(subject);\n  subject.on = eventsStorage.on;\n  subject.off = eventsStorage.off;\n  subject.fire = eventsStorage.fire;\n  return subject;\n};\n\nfunction createEventsStorage(subject) {\n  // Store all event listeners to this hash. Key is event name, value is array\n  // of callback records.\n  //\n  // A callback record consists of callback function and its optional context:\n  // { 'eventName' => [{callback: function, ctx: object}] }\n  var registeredEvents = Object.create(null);\n\n  return {\n    on: function (eventName, callback, ctx) {\n      if (typeof callback !== 'function') {\n        throw new Error('callback is expected to be a function');\n      }\n      var handlers = registeredEvents[eventName];\n      if (!handlers) {\n        handlers = registeredEvents[eventName] = [];\n      }\n      handlers.push({callback: callback, ctx: ctx});\n\n      return subject;\n    },\n\n    off: function (eventName, callback) {\n      var wantToRemoveAll = (typeof eventName === 'undefined');\n      if (wantToRemoveAll) {\n        // Killing old events storage should be enough in this case:\n        registeredEvents = Object.create(null);\n        return subject;\n      }\n\n      if (registeredEvents[eventName]) {\n        var deleteAllCallbacksForEvent = (typeof callback !== 'function');\n        if (deleteAllCallbacksForEvent) {\n          delete registeredEvents[eventName];\n        } else {\n          var callbacks = registeredEvents[eventName];\n          for (var i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].callback === callback) {\n              callbacks.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      return subject;\n    },\n\n    fire: function (eventName) {\n      var callbacks = registeredEvents[eventName];\n      if (!callbacks) {\n        return subject;\n      }\n\n      var fireArguments;\n      if (arguments.length > 1) {\n        fireArguments = Array.prototype.splice.call(arguments, 1);\n      }\n      for(var i = 0; i < callbacks.length; ++i) {\n        var callbackInfo = callbacks[i];\n        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);\n      }\n\n      return subject;\n    }\n  };\n}\n\nfunction validateSubject(subject) {\n  if (!subject) {\n    throw new Error('Eventify cannot use falsy object as events subject');\n  }\n  var reservedWords = ['on', 'fire', 'off'];\n  for (var i = 0; i < reservedWords.length; ++i) {\n    if (subject.hasOwnProperty(reservedWords[i])) {\n      throw new Error(\"Subject cannot be eventified, since it already has property '\" + reservedWords[i] + \"'\");\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ngraph.events/index.js\n// module id = puH/\n// module chunks = 2","/**\n * This module is similar to JSON, but it encodes/decodes in query string\n * format `key1=value1...`\n */\nmodule.exports = {\n  parse: parse,\n  stringify: stringify\n};\n\nfunction stringify(object) {\n  if (!object) return '';\n\n  return Object.keys(object).map(toPairs).join('&');\n\n  function toPairs(key) {\n    var value = object[key];\n    var pair = encodePart(key);\n    if (value !== undefined) {\n      pair += '=' + encodeValue(value);\n    }\n\n    return pair;\n  }\n}\n\nfunction parse(queryString) {\n  var query = Object.create(null);\n\n  if (!queryString) return query;\n\n  queryString.split('&').forEach(decodeRecord);\n\n  return query;\n\n  function decodeRecord(queryRecord) {\n    if (!queryRecord) return;\n\n    var pair = queryRecord.split('=');\n    query[decodeURIComponent(pair[0])] = decodeValue(pair[1]);\n  }\n}\n\nfunction encodeValue(value) {\n  // TODO: Do I need this?\n  // if (typeof value === 'string') {\n  //   if (value.match(/^(true|false)$/)) {\n  //     // special handling of strings that look like booleans\n  //     value = JSON.stringify('' + value);\n  //   } else if (value.match(/^-?\\d+\\.?\\d*$/)) {\n  //     // special handling of strings that look like numbers\n  //     value = JSON.stringify('' + value);\n  //   }\n  // }\n  if (value instanceof Date) {\n    value = value.toISOString();\n  }\n  var uriValue = encodePart(value);\n  return uriValue;\n}\n\nfunction encodePart(part) {\n  // We want to make sure that we also encode symbols like ( and ) correctly\n  var encoded = encodeURIComponent(part);\n  return encoded.replace(/[()]/g, saferEscape);\n}\n\nfunction saferEscape(character) {\n  if (character === ')') return '%29';\n  if (character === '(') return '%28';\n  return character; // What?\n}\n\n/**\n * This method returns typed value from string\n */\nfunction decodeValue(value) {\n  value = decodeURIComponent(value);\n\n  if (value === \"\") return value;\n  if (!isNaN(value)) return parseFloat(value);\n  if (isBolean(value)) return value === 'true';\n  if (isISODateString(value)) return new Date(value);\n\n  return value;\n}\n\nfunction isBolean(strValue) {\n  return strValue === 'true' || strValue === 'false';\n}\n\nfunction isISODateString(str) {\n  return str && str.match(/(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/query-state/lib/query.js\n// module id = yNAk\n// module chunks = 2"],"sourceRoot":""}